import pyfiglet
ascii_banner = pyfiglet.figlet_format("Scanner")
print(ascii_banner)

#Main script
import requests
import socket
import ssl
from bs4 import BeautifulSoup
import re
from urllib.parse import urlparse

# SQL Injection, XSS)
vulnerabilities = {
    "SQL Injection": r"('|\s)--\s*|(select\s+.*\s+from\s+.*\s*where\s+.*|union\s+select\s+.*)",
    "XSS": r"<script.*?>.*?</script.*?>|<.*?javascript:.*?>",
    "Open Redirect": r"https?://.*\.\w+",
}

# Get server location based on the IP address
def get_server_location(url):
    try:
        # IP address of the website
        ip_address = socket.gethostbyname(url.split("://")[1].split("/")[0])
        
        # Use ipinfo.io to get geolocation information (free tier)
        response = requests.get(f"https://ipinfo.io/{ip_address}/json")
        data = response.json()
        
        # Extract location data
        location = data.get("city", "Unknown city") + ", " + data.get("region", "Unknown region") + ", " + data.get("country", "Unknown country")
        return ip_address, location
    except Exception as e:
        print(f"Could not determine server location: {e}")
        return "Unknown IP", "Unknown location"

# Check SSL/TLS certificate
def check_ssl_cert(url):
    if not url.startswith("https://"):
        print("This website does not use HTTPS. SSL/TLS certificate check skipped.")
        return

    domain = urlparse(url).hostname  # Get the domain part from the URL
    try:
        # Create a socket connection to the website on port 443 (HTTPS)
        context = ssl.create_default_context()
        with context.wrap_socket(socket.socket(), server_hostname=domain) as s:
            s.connect((domain, 443))
            ssl_info = s.getpeercert()

            # Extract and print certificate details
            print(f"\n[+] SSL/TLS Certificate Information for {domain}:")
            print(f"   Issuer: {ssl_info['issuer']}")
            print(f"   Subject: {ssl_info['subject']}")
            print(f"   Expiry Date: {ssl_info['notAfter']}")

    except Exception as e:
        print(f"SSL/TLS certificate check failed for {url}: {e}")

# Checks the vulnerabilities
def check_vulnerabilities(url):
    print(f"\nChecking website: {url}")
    try:
        # Get server location (geolocation of the IP address)
        ip_address, server_location = get_server_location(url)
        print(f"Server Location: {server_location} (IP: {ip_address})")

        # Send GET request
        response = requests.get(url)
        
        # Check if website is reachable
        if response.status_code != 200:
            print(f"Error: Failed to reach {url}. Status code: {response.status_code}")
            return

        # Check SSL certificate (only for HTTPS sites)
        check_ssl_cert(url)

        # Check HTTP headers for security-related headers
        check_http_headers(response)

        # Scan the common vulnerabilities
        scan_for_vulnerabilities(response.text)

        # Perform additional website scans for specific vulnerabilities (SQLi, XSS)
        scan_website(url)

    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")

# Check security headers (example: Content Security Policy, Strict-Transport-Security)
def check_http_headers(response):
    headers = response.headers
    print("\n[+] HTTP Headers:")
    if 'Strict-Transport-Security' in headers:
        print("   Strict-Transport-Security: Present")
    else:
        print("   Strict-Transport-Security: Missing")
    
    if 'X-Content-Type-Options' in headers:
        print("   X-Content-Type-Options: Present")
    else:
        print("   X-Content-Type-Options: Missing")

    if 'X-XSS-Protection' in headers:
        print("   X-XSS-Protection: Present")
    else:
        print("   X-XSS-Protection: Missing")

# Scans the known vulnerability patterns in page content
def scan_for_vulnerabilities(page_content):
    print("\n[+] Scanning for vulnerabilities...")

    # Checks the SQL Injection (basic pattern matching)
    if re.search(vulnerabilities["SQL Injection"], page_content, re.IGNORECASE):
        print("   SQL Injection vulnerability detected!")
    
    # Checks the XSS (basic pattern matching)
    if re.search(vulnerabilities["XSS"], page_content, re.IGNORECASE):
        print("   XSS vulnerability detected!")
    
    # Check for open redirects (basic URL pattern matching)
    if re.search(vulnerabilities["Open Redirect"], page_content, re.IGNORECASE):
        print("   Open Redirect vulnerability detected!")

# Scan website for specific vulnerabilities: SQL Injection, XSS
def scan_website(url):
    try:
        # Send HTTP request to the website
        response = requests.get(url)

        # Parse HTML using BeautifulSoup
        soup = BeautifulSoup(response.content, 'html.parser')

        # Identify input fields
        input_fields = soup.find_all('input', type='text')

        if not input_fields:
            print(f"No input fields found on {url}. Skipping SQLi and XSS tests.")
            return

        # Test for SQL injection
        sql_injection_payloads = [' OR 1=1 --', ' UNION SELECT ...']
        for payload in sql_injection_payloads:
            input_field = input_fields[0]
            input_field['value'] = payload
            # Send POST request with SQL injection payload
            response = requests.post(url, data={input_field.get('name'): payload})
            if 'error' in response.text:
                print(f"SQL Injection detected on {url}")

        # Test for XSS
        xss_payloads = ['<script>alert("XSS")</script>']
        for payload in xss_payloads:
            input_field = input_fields[0]
            input_field['value'] = payload
            # Send POST request with XSS payload
            response = requests.post(url, data={input_field.get('name'): payload})
            if 'alert' in response.text:
                print(f"XSS detected on {url}")

    except requests.exceptions.RequestException as e:
        print(f"Error during website scanning: {e}")

# Main entry point for the script
if __name__ == "__main__":
    # Prompt the user to input the website URL
    url = input("Please enter the website URL to scan (e.g., http://example.com): ").strip()
    
    # Check if URL is valid (basic validation)
    if not url.startswith("http://") and not url.startswith("https://"):
        print("Invalid URL. Please ensure the URL starts with http:// or https://")
    else:
        check_vulnerabilities(url)